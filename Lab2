TRACE
int
main(int argc, char *argv[])
{
  int i;
  char *nargv[MAXARG];

  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
    fprintf(2, "Usage: %s mask command\n", argv[0]);
    exit(1);
  }

  // 只需要实现对argv[1]的记录就好
  if (trace(atoi(argv[1])) < 0) {
    fprintf(2, "%s: trace failed\n", argv[0]);
    exit(1);
  }
  
  for(i = 2; i < argc && i < MAXARG; i++){
    nargv[i-2] = argv[i];
  }
  exec(nargv[0], nargv);
  exit(0);
}

struct proc {
    ...
  int mask;                    // 添加mask值
};

sys_trace的实现
uint64
sys_trace(void)
{
  int n;
  if (argint(0, &n) < 0) // 判断参数是否获取成功
    return -1;
  myproc()->mask = n;    // 将argv[1]保存到当前进程的mask中
  return 0;
}
修改kernel/proc.c中的fork函数
int
fork(void)
{
  /* do something .... */
  safestrcpy(np->name, p->name, sizeof(p->name));
  
  // 复制 mask
  np->mask = p->mask;

  pid = np->pid;

  np->state = RUNNABLE;

  release(&np->lock);

  return pid;
}
===========================================================



SISINFO

kernal/proc.c
int
proc_size()
{
  int i;
  int n = 0;
  for (i = 0; i < NPROC; i++)
  {
    if (proc[i].state != UNUSED) n++;
  }
  return n;
}

kernal/kalloc.c

uint64 
freememory()
{
  struct run* p = kmem.freelist;
  uint64 num = 0;
  while (p)
  {
    num ++;
    p = p->next;
  }
  return num * PGSIZE;
}

kernel/sysproc.c

uint64
sys_sysinfo(void)
{
  struct sysinfo info;
  uint64 addr;
  // 获取用户态传入的sysinfo结构体
  if (argaddr(0, &addr) < 0) 
    return -1;
  struct proc* p = myproc();
  info.freemem = freememory();
  info.nproc = proc_size();
  // 将内核态中的info复制到用户态
  if (copyout(p->pagetable, addr, (char*)&info, sizeof(info)) < 0)
    return -1;
  return 0;
